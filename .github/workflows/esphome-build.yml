name: Build ESPHome Firmware

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: esp32s3-zero
            build_name: pfb-s3-zero
          - target: esp32s3-supermini
            build_name: pfb-s3-mini
          - target: esp32c3-zero
            build_name: pfb-c3-zero
          - target: esp32c3-supermini
            build_name: pfb-c3-mini
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create empty secrets file
        run: |
          touch firmware/esphome/secrets.yaml || true
      
      - name: Setup yq
        uses: vegardit/gha-setup-yq@v1

      - name: Set git sha
        run: |
          SUMMARY=$(git log -1 --pretty=%B)
          SUMMARY="${SUMMARY//'%'/'%25'}"
          SUMMARY="${SUMMARY//$'\n'/'%0A'}"
          SUMMARY="${SUMMARY//$'\r'/'%0D'}"
          echo "RELEASE_SUMMARY=$SUMMARY" >> $GITHUB_ENV

      - name: Modify version.yaml
        run: |
          yq -i '.substitutions.version = "${{ github.ref_name }}"' firmware/esphome/conf.d/version.yaml
          cat firmware/esphome/conf.d/version.yaml

      - name: Build ESP32-S3 Zero firmware
        uses: esphome/build-action@v6
        with:
          yaml-file: firmware/esphome/esp32s3-zero.yaml
          complete-manifest: false
        if: matrix.target == 'esp32s3-zero'

      - name: Build ESP32-S3 SuperMini firmware
        uses: esphome/build-action@v6
        with:
          yaml-file: firmware/esphome/esp32s3-supermini.yaml
          complete-manifest: false
        if: matrix.target == 'esp32s3-supermini'

      - name: Build ESP32-C3 Zero firmware
        uses: esphome/build-action@v6
        with:
          yaml-file: firmware/esphome/esp32c3-zero.yaml
          complete-manifest: false
        if: matrix.target == 'esp32c3-zero'

      - name: Build ESP32-C3 SuperMini firmware
        uses: esphome/build-action@v6
        with:
          yaml-file: firmware/esphome/esp32c3-supermini.yaml
          complete-manifest: false
        if: matrix.target == 'esp32c3-supermini'

      - name: List build output
        run: |
          ls -la
          ls ${{ matrix.build_name }}/* || true

      - name: Generate md5 checksum
        run: |
          ls -la ${{ matrix.build_name }}
          for file in ${{ matrix.build_name }}/*.bin; do
            md5sum "$file" | awk '{print $1}' > "${file}.md5"
            md5_length=$(wc -c < "${file}.md5")
            if [ "$md5_length" -ne 33 ]; then
              echo "MD5 generation failed for $file (length: $md5_length)"
              exit 1
            fi
          done
          ls -la ${{ matrix.build_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_name }}
          path: ${{ matrix.build_name }}/**/*
          retention-days: 5
          if-no-files-found: error

  combine-and-deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: List artifacts
        run: |
          ls -la downloaded-artifacts/

      - name: Prepare output directory
        run: |
          mkdir -p firmware/output
          for build_name in pfb-s3-zero pfb-s3-mini pfb-c3-zero pfb-c3-mini; do
            cp downloaded-artifacts/$build_name/*.bin firmware/output/ || true
            cp downloaded-artifacts/$build_name/*.md5 firmware/output/ || true
          done

      - name: Get version from git tag or branch
        id: get_version
        run: |
          # Prefer tags that do NOT start with 'v' if both exist on the same commit
          VERSION=$(git tag --points-at HEAD | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' | head -n1)
          if [ -z "$VERSION" ]; then
            VERSION=${GITHUB_REF_NAME}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create ESP Web Tools manifest file
        run: |
          jq -n --arg version "$VERSION" '{
            name: "PrintFarmButton",
            version: $version,
            builds: [],
            new_install_prompt_erase: true
          }' > firmware/output/manifest.json

          for build_name in pfb-s3-zero pfb-s3-mini pfb-c3-zero pfb-c3-mini; do
            if [ -f "downloaded-artifacts/$build_name/manifest.json" ]; then
              jq --slurpfile new "downloaded-artifacts/$build_name/manifest.json" '.builds += $new' firmware/output/manifest.json > temp.json && mv temp.json firmware/output/manifest.json
            else
              echo "Warning: manifest for $build_name not found, creating basic entry"
              chip_family="ESP32"
              if [[ "$build_name" == *"c3"* ]]; then
                chip_family="ESP32-C3"
              fi
              jq --arg chip "$chip_family" --arg path "$build_name.bin" \
                '.builds += [{"chipFamily": $chip, "parts": [{"path": $path, "offset": 0}]}]' \
                firmware/output/manifest.json > temp.json && mv temp.json firmware/output/manifest.json
            fi
          done

          echo "Final manifest:"
          jq '.' firmware/output/manifest.json

      - name: List files in output directory
        run: |
          echo "Contents of firmware/output:"
          ls -lh firmware/output/

      - name: Commit and push build artifacts
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git stash push -m "Stash before switching to main"
          git checkout main
          git pull origin main
          git stash apply || true
          git add firmware/output/
          git add firmware/esphome/conf.d/version.yaml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update firmware build and version.yaml [skip ci]"
            git push origin main
          fi