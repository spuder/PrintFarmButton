name: Build ESPHome Firmware

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [esp32s3, esp32c3]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create empty secrets file
        run: |
          touch firmware/esphome/secrets.yaml || true
      
      - name: Build ESP32-S3 firmware
        uses: esphome/build-action@v6
        with:
          yaml-file: firmware/esphome/esp32s3.yaml
          complete-manifest: false
        if: matrix.target == 'esp32s3'

      - name: Build ESP32-C3 firmware
        uses: esphome/build-action@v6
        with:
          yaml-file: firmware/esphome/esp32c3.yaml
          complete-manifest: false
        if: matrix.target == 'esp32c3'
      
      - name: List build output
        run: |
          ls -la
          ls printfarmbutton-${{ matrix.target }}/* || true

      - name: Generate md5 checksum
        run: |
          ls -la printfarmbutton-${{ matrix.target }}

          for file in printfarmbutton-${{ matrix.target }}/*.bin; do
            md5sum "$file" | awk '{print $1}' > "${file}.md5"
            md5_length=$(wc -c < "${file}.md5")
            if [ "$md5_length" -ne 33 ]; then
              echo "MD5 generation failed for $file (length: $md5_length)"
              exit 1
            fi
          done
          ls -la printfarmbutton-${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: printfarmbutton-${{ matrix.target }}
          path: printfarmbutton-${{ matrix.target }}/**/*
          retention-days: 5
          if-no-files-found: error

  combine-and-deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: List artifacts
        run: |
          ls -la downloaded-artifacts/

      - name: Prepare output directory
        run: |
          mkdir -p firmware/output
          cp downloaded-artifacts/printfarmbutton-esp32s3/*.bin firmware/output/ || true
          cp downloaded-artifacts/printfarmbutton-esp32s3/*.md5 firmware/output/ || true
          cp downloaded-artifacts/printfarmbutton-esp32c3/*.bin firmware/output/ || true
          cp downloaded-artifacts/printfarmbutton-esp32c3/*.md5 firmware/output/ || true

      - name: Create ESP Web Tools manifest file
        run: |
          jq -n '{
            name: "PrintFarmButton",
            version: "1.0.0",
            builds: [],
            new_install_prompt_erase: true
          }' > firmware/output/manifest.json

          for target in esp32s3 esp32c3; do
            if [ -f "downloaded-artifacts/printfarmbutton-$target/manifest.json" ]; then
              jq --slurpfile new_build "downloaded-artifacts/printfarmbutton-$target/manifest.json" '.builds += $new_build' firmware/output/manifest.json > temp.json && mv temp.json firmware/output/manifest.json
            else
              echo "Warning: manifest for $target not found, creating basic entry"
              chip_family="ESP32"
              if [ "$target" = "esp32c3" ]; then
                chip_family="ESP32-C3"
              fi
              
              jq --arg chip "$chip_family" --arg path "printfarmbutton-$target.bin" \
                '.builds += [{"chipFamily": $chip, "parts": [{"path": $path, "offset": 0}]}]' \
                firmware/output/manifest.json > temp.json && mv temp.json firmware/output/manifest.json
            fi
          done

          echo "Final manifest:"
          jq '.' firmware/output/manifest.json

      - name: List files in output directory
        run: |
          echo "Contents of firmware/output:"
          ls -lh firmware/output/

      - name: Commit and push build artifacts
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all files in firmware/output
          git add firmware/output/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update firmware build [skip ci]"
            git push
          fi