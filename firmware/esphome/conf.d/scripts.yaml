script:
- id: connect_mqtt
  mode: queued
  then:
  - if:
      condition:
        lambda: 'return id(cloud_connection).state == "Bambu";'
      then:
      - if:
          condition:
            lambda: |
              return !id(bambu_ip_address).state.empty() &&
                     !id(bambu_lan_access_code).state.empty() &&
                     !id(bambu_serial_number).state.empty();
          then:
          # Credentials are set, check if we need to reconnect
          - if:
              condition:
                lambda: |
                  return id(last_cloud_state) != "Bambu" || !id(mqtt_client_id).is_connected();
              then:
              - logger.log: "Switching to Bambu or not connected, reconnecting..."
              - mqtt.disable:
                  id: mqtt_client_id
              - lambda: |
                  ESP_LOGI("mqtt", "Setting Bambu MQTT client with IP: %s, Serial: %s",
                         id(bambu_ip_address).state.c_str(), id(bambu_serial_number).state.c_str());
                  id(mqtt_client_id).set_broker_address(id(bambu_ip_address).state.c_str());
                  id(mqtt_client_id).set_broker_port(parse_number<uint16_t>(id(mqtt_port_bambu).state).value_or(8883));
                  id(mqtt_client_id).set_username("bblp");
                  id(mqtt_client_id).set_password(id(bambu_lan_access_code).state.c_str());
                  //id(mqtt_client_id).set_ca_certificate(R"EOF(-----BEGIN CERTIFICATE-----\nMIIDZTCCAk2gAwIBAgIUV1FckwXElyek1onFnQ9kL7Bk4N8wDQYJKoZIhvcNAQEL\nBQAwQjELMAkGA1UEBhMCQ04xIjAgBgNVBAoMGUJCTCBUZWNobm9sb2dpZXMgQ28u\nLCBMdGQxDzANBgNVBAMMBkJCTCBDQTAeFw0yMjA0MDQwMzQyMTFaFw0zMjA0MDEw\nMzQyMTFaMEIxCzAJBgNVBAYTAkNOMSIwIAYDVQQKDBlCQkwgVGVjaG5vbG9naWVz\nIENvLiwgTHRkMQ8wDQYDVQQDDAZCQkwgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IB\nDwAwggEKAoIBAQDL3pnDdxGOk5Z6vugiT4dpM0ju+3Xatxz09UY7mbj4tkIdby4H\noeEdiYSZjc5LJngJuCHwtEbBJt1BriRdSVrF6M9D2UaBDyamEo0dxwSaVxZiDVWC\neeCPdELpFZdEhSNTaT4O7zgvcnFsfHMa/0vMAkvE7i0qp3mjEzYLfz60axcDoJLk\np7n6xKXI+cJbA4IlToFjpSldPmC+ynOo7YAOsXt7AYKY6Glz0BwUVzSJxU+/+VFy\n/QrmYGNwlrQtdREHeRi0SNK32x1+bOndfJP0sojuIrDjKsdCLye5CSZIvqnbowwW\n1jRwZgTBR29Zp2nzCoxJYcU9TSQp/4KZuWNVAgMBAAGjUzBRMB0GA1UdDgQWBBSP\nNEJo3GdOj8QinsV8SeWr3US+HjAfBgNVHSMEGDAWgBSPNEJo3GdOj8QinsV8SeWr\n3US+HjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQABlBIT5ZeG\nfgcK1LOh1CN9sTzxMCLbtTPFF1NGGA13mApu6j1h5YELbSKcUqfXzMnVeAb06Htu\n3CoCoe+wj7LONTFO++vBm2/if6Jt/DUw1CAEcNyqeh6ES0NX8LJRVSe0qdTxPJuA\nBdOoo96iX89rRPoxeed1cpq5hZwbeka3+CJGV76itWp35Up5rmmUqrlyQOr/Wax6\nitosIzG0MfhgUzU51A2P/hSnD3NDMXv+wUY/AvqgIL7u7fbDKnku1GzEKIkfH8hm\nRs6d8SCU89xyrwzQ0PR853irHas3WrHVqab3P+qNwR0YirL0Qk7Xt/q3O1griNg2\nBlbjg3obpHo9\n-----END CERTIFICATE-----)EOF");
                  id(last_cloud_state) = "Bambu";
              - mqtt.enable:
                  id: mqtt_client_id
                # https://github.com/DutchDevelop/BLLEDController/blob/main/src/blled/mqttmanager.h#L34C16-L46
                # https://github.com/Doridian/OpenBambuAPI/blob/main/mqtt.md#unsolicited-or-semi-solicited-reports
                # Rumor is that A1 and P1 and X1 have different values for 'off', some use -1 while others use 255
                # TODO: verify that all models share states
                # TODO: A1 shows 'GCode State: RUNNING, stg_cur: 255', identify where 255 comes from
                # | gcode_state | stg_cur (p1s) | stg_cur (a1mini) | color | Description
                # | ---         | ---     | ---   | --- 
                # | IDLE        | -1 | 0     | White | Printer is idle (just powered on or waiting)
                # | RUNNING     | -1 | ?       | White | Print file sent, preparing to start
                # | RUNNING     | 2 | ?        | White | Bed is preheating
                # | RUNNING     | 14| ?       | OFF   | Nozzle cleaning (Lidar calibration)
                # | RUNNING     | 1| ?        | OFF   | Bed leveling (Lidar calibration)
                # | RUNNING     | 8| ?        | OFF   | Extrusion calibration (Lidar calibration)
                # | RUNNING     | 0| ?        | White | Printing in progress
                # | FINISH      | -1| ?       | Green | Print finished, bed lowered, filament retracted
                # | FINISH      | -1| ?       | Green | Waiting for user to open the door (BLLED logic)
                # | FINISH      | -1| ?       | White | Door opened, post-print state
                # | FINISH      | -1| ?       | OFF   | Printer inactive for 30 minutes after print
              - lambda: |
                  // Subscribe to Bambu topics
                  if (!id(bambu_serial_number).state.empty()) {
                    std::string topic = "device/" + id(bambu_serial_number).state + "/report";
                    id(mqtt_client_id).subscribe_json(topic.c_str(), [=](const std::string &topic, JsonObjectConst root) {
                      ESP_LOGVV("mqtt", "Received Bambu MQTT message");
                      if (!root.containsKey("print")) {
                        ESP_LOGV("mqtt", "No 'print' key in JSON");
                        return;
                      }
                      auto print_obj = root["print"];
                      if (!print_obj.containsKey("gcode_state")) {
                        ESP_LOGVV("mqtt", "No 'gcode_state' key in print object");
                        return;
                      }
                      if (!print_obj.containsKey("stg_cur")) {
                        ESP_LOGVV("mqtt", "No 'stg_cur' key in print object");
                        return;
                      }
                      const char* gcode_state = print_obj["gcode_state"];
                      int stg_cur = print_obj["stg_cur"].as<int>();
                      std::string state_str(gcode_state ? gcode_state : "");
                      ESP_LOGI("mqtt", "Parsed gcode_state='%s', stg_cur=%d", state_str.c_str(), stg_cur);

                      // Use a single status variable for Bambu state
                      std::string bambu_status = "UNKNOWN";
                      if (state_str == "IDLE" && (stg_cur == -1 || stg_cur == 0)) {
                        ESP_LOGD("mqtt", "GCode State: IDLE, stg_cur: %d", stg_cur);
                        bambu_status = "IDLE";
                      } else if (state_str == "RUNNING" && (stg_cur == -1 || stg_cur == 255 || stg_cur == 2 || stg_cur == 14 || stg_cur == 1 || stg_cur == 8)) {
                        ESP_LOGD("mqtt", "GCode State: RUNNING, stg_cur: %d (preparing)", stg_cur);
                        bambu_status = "PREPARING";
                      } else if (state_str == "RUNNING" && stg_cur == 0) {
                        ESP_LOGD("mqtt", "GCode State: RUNNING, stg_cur: 0 (printing)");
                        bambu_status = "PRINTING";
                      } else if (state_str == "FINISH" && (stg_cur == -1 || stg_cur == 255)) {
                        ESP_LOGD("mqtt", "GCode State: FINISH, stg_cur: %d", stg_cur);
                        bambu_status = "COMPLETED";
                      } else if (state_str == "ERROR") {
                        ESP_LOGD("mqtt", "GCode State: ERROR, stg_cur: %d", stg_cur);
                        bambu_status = "ERROR";
                      } else {
                        ESP_LOGD("mqtt", "GCode State: %s, stg_cur: %d (no direct mapping)", state_str.c_str(), stg_cur);
                      }
                      id(bambu_status_text).publish_state(bambu_status);
                    });
                    
                    ESP_LOGI("mqtt", "Subscribed to Bambu topic: %s", topic.c_str());
                  }
              else:
              - logger.log: "Bambu MQTT already connected and configured."
          else:
          # Bambu selected but no credentials, ensure it's disconnected
          - logger.log: "Missing Bambu credentials, ensuring MQTT is disconnected."
          - mqtt.disable:
              id: mqtt_client_id
  - if:
      condition:
        lambda: 'return id(cloud_connection).state == "Printago";'
      then:
      - if:
          condition:
            lambda: |
              return !id(printer_id).state.empty() &&
                     !id(username_text).state.empty() &&
                     !id(mqtt_endpoint_text).state.empty();
          then:
          # Credentials are set, check if we need to connect
          - if:
              condition:
                lambda: |
                  return id(last_cloud_state) != "Printago" || !id(mqtt_client_id).is_connected();
              then:
              - logger.log: "Switching to Printago or not connected, connecting..."
              - mqtt.disable:
                  id: mqtt_client_id
              - lambda: |
                  // Generate client_id with format: apiclient_<username>_<random_suffix>
                  std::string client_id = "apiclient_" + id(username_text).state + "_" + std::to_string(random_uint32());
                  ESP_LOGI("mqtt", "Setting client_id to: %s", client_id.c_str());

                  id(mqtt_client_id).set_broker_address(id(mqtt_endpoint_text).state.c_str());
                  id(mqtt_client_id).set_broker_port(parse_number<uint16_t>(id(mqtt_port_printago).state).value_or(1883));
                  id(mqtt_client_id).set_username(id(username_text).state.c_str());
                  id(mqtt_client_id).set_password(id(api_key_text).state.c_str());
                  id(mqtt_client_id).set_client_id(client_id.c_str());
                  id(mqtt_client_id).set_ca_certificate("");
                  id(last_cloud_state) = "Printago";
              - script.execute: clear_printago_status
              - mqtt.enable:
                  id: mqtt_client_id
              else:
              - logger.log: "Printago MQTT already connected."
          else:
          # Printago selected but no credentials, ensure it's disconnected
          - logger.log: "Missing Printago credentials, ensuring MQTT is disconnected."
          - mqtt.disable:
              id: mqtt_client_id

- id: update_led_color
  mode: restart
  then:
  # Priority 1: WiFi disconnected -> rainbow effect
  - if:
      condition:
        not:
          wifi.connected:
      then:
      - logger.log: "WiFi disconnected, showing rainbow effect"
      - light.turn_off:
          id: printfarmbutton_rgb
      - delay: 100ms
      - logger.log: "Turning on rainbow effect due to WiFi disconnected"
      - light.turn_on:
          id: printfarmbutton_rgb
          effect: "Rainbow"
          brightness: 90%
      else:
      # Priority 2: WiFi connected but MQTT disconnected -> rainbow effect
      - if:
          condition:
            not:
            - lambda: 'return id(mqtt_client_id).is_connected();'
          then:
          - logger.log: "WiFi connected but MQTT disconnected, showing rainbow effect"
          - logger.log: "Turning on rainbow effect for MQTT not connected"
          - light.turn_on:
              id: printfarmbutton_rgb
              effect: "Rainbow"
              brightness: 90%
          else:
          # Priority 3: WiFi connected, MQTT connected, cloud connection == "Bambu" -> do Bambu things
          - if:
              condition:
                lambda: 'return id(cloud_connection).state == "Bambu";'
              then:
              # https://wiki.bambulab.com/en/h2/manual/status-indicator-light-meanings
              - if:
                  condition:
                    lambda: 'return id(bambu_status_text).state == "IDLE";'
                  then:
                  - logger.log: "Bambu: Turning on Bambu Idle effect (IDLE)"
                  - light.turn_on:
                      id: printfarmbutton_rgb
                      effect: "Bambu Idle"
                      brightness: 90%
                  else:
                  - if:
                      condition:
                        lambda: 'return id(bambu_status_text).state == "PREPARING";'
                      then:
                      - logger.log: "Bambu: Turning on Bambu Preparing effect (PREPARING)"
                      - light.turn_on:
                          id: printfarmbutton_rgb
                          effect: "Bambu Preparing"
                          brightness: 90%
                      else:
                      - if:
                          condition:
                            lambda: 'return id(bambu_status_text).state == "PRINTING";'
                          then:
                          - logger.log: "Bambu: Turning on blue (PRINTING)"
                          - light.turn_on:
                              id: printfarmbutton_rgb
                              red: 0.0
                              green: 0.5
                              blue: 1.0
                              effect: none
                              brightness: 90%
                          else:
                          - if:
                              condition:
                                lambda: 'return id(bambu_status_text).state == "ERROR";'
                              then:
                              - logger.log: "Bambu: Turning on Bambu Error effect (ERROR)"
                              - light.turn_on:
                                  id: printfarmbutton_rgb
                                  effect: "Bambu Error"
                                  brightness: 90%
                              else:
                              - if:
                                  condition:
                                    lambda: 'return id(bambu_status_text).state == "COMPLETED";'
                                  then:
                                  - logger.log: "Bambu: Turning on green (COMPLETED)"
                                  - light.turn_on:
                                      id: printfarmbutton_rgb
                                      red: 0.0
                                      green: 1.0
                                      blue: 0.0
                                      effect: none
                                      brightness: 90%
                                  else:
                                  - if:
                                      condition:
                                        lambda: 'return id(bambu_status_text).state == "UNKNOWN";'
                                      then:
                                      - logger.log: "Bambu: Turning on fallback color (UNKNOWN)"
                                      - light.turn_on:
                                          id: printfarmbutton_rgb
                                          red: 0.8
                                          green: 1.0
                                          blue: 0.6
                                          brightness: 90%
                                      else:
                                      # Fallback for any other Bambu state
                                      - logger.log: "Bambu: Turning on fallback rainbow for unknown state"
                                      - light.turn_on:
                                          id: printfarmbutton_rgb
                                          effect: "Rainbow"
                                          brightness: 90%
              else:
              # Priority 4: WiFi connected, MQTT connected, cloud connection == "Printago" -> do Printago things
              - if:
                  condition:
                    lambda: 'return id(cloud_connection).state == "Printago";'
                  then:
                  # Only proceed with Printago logic if ALL credentials are present and non-empty
                  - if:
                      condition:
                        lambda: |
                          return id(printer_id).state.empty() ||
                                 id(username_text).state.empty() ||
                                 id(api_key_text).state.empty();
                      then:
                      # Missing Printago credentials - show rainbow effect and do NOT reference Printago sensors
                      - logger.log: "Printago: Missing credentials, showing rainbow"
                      - light.turn_on:
                          id: printfarmbutton_rgb
                          effect: "Rainbow"
                          brightness: 90%
                      else:
                      # All credentials present, safe to reference Printago sensors
                      - if:
                          condition:
                            not:
                            - lambda: 'return id(printer_is_online_sensor).state;'
                          then:
                          # Printer offline - turn off LED
                          - logger.log: "Printago: Printer offline, turning off LED"
                          - light.turn_off:
                              id: printfarmbutton_rgb
                          else:
                          - if:
                              condition:
                                or:
                                - lambda: 'return id(printer_has_error_sensor).state;'
                                - lambda: 'return id(printer_has_warning_sensor).state;'
                              then:
                              - logger.log: "Printago: Printer has error or warning, turning on red"
                              - light.turn_on:
                                  id: printfarmbutton_rgb
                                  red: 1.0
                                  green: 0.0
                                  blue: 0.0
                                  effect: none
                                  brightness: 90%
                              else:
                              - if:
                                  condition:
                                    and:
                                    - lambda: 'return id(is_downloading).state;'
                                    - not:
                                      - lambda: 'return id(is_printing).state;'
                                  then:
                                  - logger.log: "Printago: Downloading but not printing, turning on Left2Right"
                                  - light.turn_on:
                                      id: printfarmbutton_rgb
                                      effect: "Left2Right"
                                      brightness: 90%
                                  else:
                                  - if:
                                      condition:
                                        lambda: 'return id(is_printing).state;'
                                      then:
                                      - logger.log: "Printago: Printing, turning on blue"
                                      - light.turn_on:
                                          id: printfarmbutton_rgb
                                          red: 0.0
                                          green: 0.5
                                          blue: 1.0
                                          effect: none
                                          brightness: 90%
                                      else:
                                      # Default for Printago (online, no other state) is green
                                      - logger.log: "Printago: Online, turning on green"
                                      - light.turn_on:
                                          id: printfarmbutton_rgb
                                          red: 0.0
                                          green: 1.0
                                          blue: 0.0
                                          effect: none
                                          brightness: 90%
                  else:
                  # Cloud connection is neither Bambu nor Printago, show rainbow
                  - logger.log: "Unknown cloud connection, showing rainbow"
                  - light.turn_on:
                      id: printfarmbutton_rgb
                      effect: "Rainbow"
                      brightness: 90%
