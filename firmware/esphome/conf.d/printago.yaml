binary_sensor:
- platform: template
  name: "Printer Confirmed Ready"
  id: printer_confirmed_ready_sensor
  lambda: |-
    return id(printer_confirmed_ready_sensor).state;
  icon: "mdi:printer-check"
  on_state:
    then:
    - script.execute: update_led_color
  internal: false

- platform: template
  name: "Printer Is Available"
  id: printer_is_available_sensor
  lambda: |-
    return id(printer_is_available_sensor).state;
  icon: "mdi:printer"
  on_state:
    then:
    - script.execute: update_led_color
  internal: false

- platform: template
  name: "Printer Is Online"
  id: printer_is_online_sensor
  lambda: |-
    return id(printer_is_online_sensor).state;
  icon: "mdi:lan-connect"
  on_state:
    then:
    - script.execute: update_led_color
  internal: false

- platform: template
  name: "Printer Has Error"
  id: printer_has_error_sensor
  lambda: |-
    return id(printer_has_error_sensor).state;
  icon: "mdi:printer-alert"
  on_state:
    then:
    - script.execute: update_led_color
  internal: false

- platform: template
  name: "Printer Has Warning"
  id: printer_has_warning_sensor
  lambda: |-
    return id(printer_has_warning_sensor).state;
  icon: "mdi:printer-warning"
  on_state:
    then:
    - script.execute: update_led_color
  internal: false

- platform: template
  name: "Is Downloading"
  id: is_downloading
  lambda: |-
    return id(is_downloading).state;
  icon: "mdi:download"
  internal: false
  on_state:
    then:
    - script.execute: update_led_color

script:
- id: clear_printer_selection
  mode: queued
  then:
  - lambda: |-
      ESP_LOGI("printago", "Clearing printer selection");
      id(printer_id).publish_state("");
      id(printer_name).publish_state("");

- id: check_printago_status
  mode: queued
  then:
  - if:
      condition:
        and:
        - lambda: 'return !id(printer_id).state.empty();'
        - lambda: 'return !id(api_key_text).state.empty();'
        - lambda: 'return !id(username_text).state.empty();'
        - lambda: 'return !id(mqtt_endpoint_text).state.empty();'
      then:
      - http_request.get:
          url: !lambda |-
            return "https://api.printago.io/v1/printers/" + id(printer_id).state;
          request_headers:
            authorization: !lambda |-
              static std::string key;
              std::string raw_key = id(api_key_text).state;
              raw_key.erase(std::remove_if(raw_key.begin(), raw_key.end(), ::isspace), raw_key.end());
              key = "ApiKey " + raw_key;
              return key.c_str();
            x-printago-storeid: !lambda |-
              static std::string store;
              std::string raw_store = id(username_text).state;
              raw_store.erase(std::remove_if(raw_store.begin(), raw_store.end(), ::isspace), raw_store.end());
              store = raw_store;
              return store.c_str();
          capture_response: true
          max_response_buffer_size: 2048
          on_response:
            then:
            - lambda: |-
                ESP_LOGI("printago", "HTTP Response code: %d", response->status_code);
                ESP_LOGI("printago", "Response body length: %d bytes", body.length());
                if (response->status_code == 200) {
                  JsonDocument doc;
                  DeserializationError error = deserializeJson(doc, body);
                  if (error) {
                    ESP_LOGW("printago", "Failed to parse JSON: %s", error.c_str());
                    return;
                  }
                  bool confirmed_ready = doc["confirmedReady"] | false;
                  bool is_available = doc["isAvailable"] | false;
                  bool is_online = doc["isOnline"] | false;
                  
                  // Extract and set printer name from metadata if available
                  if (!doc["metadata"].isNull() && !doc["metadata"]["name"].isNull()) {
                    const char* name = doc["metadata"]["name"].as<const char*>();
                    if (name != nullptr) {
                      ESP_LOGI("printago", "Set printer name to: %s", name);
                      id(printer_name).publish_state(name);
                    }
                  }
                  
                  id(printer_confirmed_ready_sensor).publish_state(confirmed_ready);
                  id(printer_is_available_sensor).publish_state(is_available);
                  id(printer_is_online_sensor).publish_state(is_online);
                } else {
                  ESP_LOGW("printago", "HTTP error %d", response->status_code);
                }
      else:
      - lambda: |-
          ESP_LOGW("printago", "Not running check_printago_status: printer_id, api_key_text, or username_text is missing");

- id: clear_printago_status
  mode: queued
  then:
  - lambda: |-
      // Clear all global printer status variables
      id(printer_confirmed_ready_sensor).publish_state(false);
      id(printer_is_available_sensor).publish_state(false);
      id(printer_is_online_sensor).publish_state(false);
      id(printer_name).publish_state("");  // Clear printer name

      ESP_LOGI("printago", "Cleared all printer status globals - all set to false");

- id: update_led_color
  mode: queued
  then:
  - if:
      condition:
        not:
        - lambda: 'return id(printer_is_online_sensor).state;'
      then: # LED white on offline

      # - light.turn_on:
      #     id: printfarmbutton_rgb
      #     red: 1.0
      #     green: 1.0
      #     blue: 1.0
      #     effect: none
      #     brightness: 90%
      else:
      - if:
          condition:
            or:
            - lambda: 'return id(printer_has_error_sensor).state;'
            - lambda: 'return id(printer_has_warning_sensor).state;'
          then:
          - light.turn_on:
              id: printfarmbutton_rgb
              red: 1.0
              green: 0.0
              blue: 0.0
              effect: none
              brightness: 90%
          else:
          - if:
              condition:
                and:
                - lambda: 'return id(is_downloading).state;'
              then:
              - light.turn_on:
                  id: printfarmbutton_rgb
                  red: 0.0
                  green: 1.0
                  blue: 0.0
                  effect: Left2Right
                  brightness: 90%
              else:
              - if:
                  condition:
                    and:
                    - lambda: 'return id(printer_confirmed_ready_sensor).state;'
                    - lambda: 'return id(printer_is_available_sensor).state;'
                  then:
                  # Blue (Ready)
                  - light.turn_on:
                      id: printfarmbutton_rgb
                      red: 0.0
                      green: 0.0
                      blue: 1.0
                      effect: none
                      brightness: 90%
                  else:
                  - if:
                      condition:
                        and:
                        - lambda: 'return !id(printer_confirmed_ready_sensor).state;'
                        - lambda: 'return id(printer_is_available_sensor).state;'
                      then:
                      # Magenta (Set Ready)
                      - light.turn_on:
                          id: printfarmbutton_rgb
                          red: 0.9
                          green: 0.0
                          blue: 0.7
                          effect: Pulse
                          brightness: 90%
                      else:
                      - if:
                          condition:
                            and:
                            - lambda: 'return !id(printer_is_available_sensor).state;'
                            - lambda: 'return !id(printer_confirmed_ready_sensor).state;'
                          then:
                          # Green (Busy)
                          - light.turn_on:
                              id: printfarmbutton_rgb
                              red: 0.0
                              green: 1.0
                              blue: 0.0
                              effect: none
                              brightness: 90%
                          else:
                          # Fallback/default
                          - light.turn_on:
                              id: printfarmbutton_rgb
                              red: 1.0
                              green: 1.0
                              blue: 1.0
                              effect: none
                              brightness: 90%
- id: mark_printer_ready
  mode: queued
  then:
  - if:
      condition:
        and:
        - lambda: 'return !id(printer_id).state.empty();'
        - lambda: 'return !id(api_key_text).state.empty();'
        - lambda: 'return !id(username_text).state.empty();'
        - lambda: 'return !id(mqtt_endpoint_text).state.empty();'
        - lambda: 'return !id(mqtt_port_text).state.empty();'
        - lambda: 'return !id(printer_confirmed_ready_sensor).state;'
        - lambda: 'return id(printer_is_available_sensor).state;'
      then:
      - http_request.send:
          method: PATCH
          url: !lambda |-
            return "https://api.printago.io/v1/printers/confirm-ready";
          request_headers:
            authorization: !lambda |-
              static std::string key;
              std::string raw_key = id(api_key_text).state;
              raw_key.erase(std::remove_if(raw_key.begin(), raw_key.end(), ::isspace), raw_key.end());
              key = "ApiKey " + raw_key;
              return key.c_str();
            x-printago-storeid: !lambda |-
              static std::string store;
              std::string raw_store = id(username_text).state;
              raw_store.erase(std::remove_if(raw_store.begin(), raw_store.end(), ::isspace), raw_store.end());
              store = raw_store;
              return store.c_str();
            content-type: application/json
          body: !lambda |-
            return std::string("{\"ready\": true, \"ids\": [\"") + id(printer_id).state + "\"]}";
          capture_response: true
          max_response_buffer_size: 2048
          on_response:
            then:
            - lambda: |-
                ESP_LOGI("printago", "Mark printer ready response: %d", response->status_code);
                if (response->status_code == 200) {
                  ESP_LOGI("printago", "Printer marked as ready");
                } else {
                  ESP_LOGW("printago", "Failed to mark printer as ready");
                }
      else:
      - lambda: |-
          ESP_LOGW("printago", "Not running mark_printer_ready: printer is not in the correct state (must be available and not already confirmed ready), or required fields are missing");

- id: fetch_printago_printers
  mode: queued
  then:
  - if:
      condition:
        and:
        - lambda: 'return !id(api_key_text).state.empty();'
        - lambda: 'return !id(username_text).state.empty();'
      then:
      # Show loading state
      - lambda: |-
          ESP_LOGI("printago", "Starting printer fetch...");
          // Update display to show loading state
          id(available_printers_display).publish_state("Loading printers...");
      - http_request.get:
          url: "https://api.printago.io/v1/printers"
          request_headers:
            authorization: !lambda |-
              static std::string key;
              std::string raw_key = id(api_key_text).state;
              raw_key.erase(std::remove_if(raw_key.begin(), raw_key.end(), ::isspace), raw_key.end());
              key = "ApiKey " + raw_key;
              return key.c_str();
            x-printago-storeid: !lambda |-
              static std::string store;
              std::string raw_store = id(username_text).state;
              raw_store.erase(std::remove_if(raw_store.begin(), raw_store.end(), ::isspace), raw_store.end());
              store = raw_store;
              return store.c_str();
          capture_response: true
          max_response_buffer_size: 8192
          on_response:
            then:
            - lambda: |-
                ESP_LOGI("printago", "Fetch printers response: %d", response->status_code);
                if (response->status_code == 200) {
                  ESP_LOGI("printago", "Response body length: %d bytes", body.length());
                  JsonDocument doc;
                  DeserializationError error = deserializeJson(doc, body);
                  
                  if (!error && doc.is<JsonArray>()) {
                    JsonArray printers = doc.as<JsonArray>();
                    ESP_LOGI("printago", "Found %d printers", printers.size());
                    
                    // Clear the global vectors
                    id(printago_printer_ids).clear();
                    id(printago_printer_names).clear();
                    
                    // Create temporary vectors to collect and sort printers
                    std::vector<std::pair<std::string, std::string>> printer_pairs;
                    
                    for (JsonVariant printer : printers) {
                      if (printer.is<JsonObject>()) {
                        JsonObject printerObj = printer.as<JsonObject>();
                        const char* printer_id = printerObj["id"] | "unknown";
                        const char* name = printerObj["name"] | "unnamed";
                        ESP_LOGI("printago", "Printer: %s (%s)", name, printer_id);
                        
                        // Add to temporary pairs if not "unknown"
                        if (strcmp(printer_id, "unknown") != 0) {
                          printer_pairs.push_back(std::make_pair(std::string(name), std::string(printer_id)));
                        }
                      }
                    }
                    
                    // Sort printers alphabetically by name (case-insensitive)
                    std::sort(printer_pairs.begin(), printer_pairs.end(), 
                      [](const std::pair<std::string, std::string>& a, const std::pair<std::string, std::string>& b) {
                        std::string name_a = a.first;
                        std::string name_b = b.first;
                        std::transform(name_a.begin(), name_a.end(), name_a.begin(), ::tolower);
                        std::transform(name_b.begin(), name_b.end(), name_b.begin(), ::tolower);
                        return name_a < name_b;
                      });
                    
                    // Populate the global vectors with sorted data
                    for (const auto& pair : printer_pairs) {
                      id(printago_printer_names).push_back(pair.first);   // name
                      id(printago_printer_ids).push_back(pair.second);    // id
                      ESP_LOGI("printago", "Sorted printer: %s (%s)", pair.first.c_str(), pair.second.c_str());
                    }
                    
                    ESP_LOGI("printago", "Stored %d sorted printers in global vectors", id(printago_printer_ids).size());
                    
                    // Auto-select first printer if only one is available and none is currently selected
                    if (id(printago_printer_ids).size() == 1 && id(printer_id).state.empty()) {
                      std::string first_id = id(printago_printer_ids)[0];
                      std::string first_name = id(printago_printer_names)[0];
                      ESP_LOGI("printago", "Auto-selecting single printer: %s (%s)", first_name.c_str(), first_id.c_str());
                      id(printer_id).publish_state(first_id);
                    } else if (id(printago_printer_ids).size() == 0) {
                      // Clear selection if no printers found
                      id(clear_printer_selection).execute();
                    }
                    
                    // Update all components immediately
                    id(available_printers_display).update();
                    id(printer_select).update();
                    id(update_printer_select_options).execute();
                  } else {
                    ESP_LOGW("printago", "Failed to parse JSON response");
                    // Show error state and update UI
                    id(available_printers_display).publish_state("Error loading printers");
                    id(printer_select).update();
                  }
                } else {
                  ESP_LOGW("printago", "HTTP error %d", response->status_code);
                  // Show error state and update UI
                  id(available_printers_display).publish_state("Error: HTTP " + std::to_string(response->status_code));
                  id(printer_select).update();
                }
      else:
      - lambda: |-
          ESP_LOGW("printago", "Not running fetch_printago_printers: api_key_text or username_text is missing");
          // Clear vectors and update dropdown when fetch fails
          id(printago_printer_ids).clear();
          id(printago_printer_names).clear();
          id(available_printers_display).update();
          id(printer_select).update();
      - script.execute: clear_printer_selection
      - script.execute: update_printer_select_options

- id: update_printer_select_options
  mode: queued
  then:
  - lambda: |-
      // Log the current printer options for debugging
      ESP_LOGI("printago", "Available printers:");
      auto& names = id(printago_printer_names);
      auto& ids = id(printago_printer_ids);

      if (names.empty()) {
        ESP_LOGI("printago", "  No printers available");
      } else {
        for (size_t i = 0; i < names.size() && i < ids.size(); i++) {
          ESP_LOGI("printago", "  %d: %s (%s)", (int)i+1, names[i].c_str(), ids[i].c_str());
        }
      }

      // Force update the select component display and options
      id(printer_select).update();

      // Also trigger a republish of the current state to force UI refresh
      id(printer_select).publish_state(id(printer_select).state);

text_sensor:
- platform: template
  name: "Printer Name"
  id: printer_name
  icon: "mdi:printer-3d"
  state_topic:
  web_server:
    sorting_group_id: printago
    sorting_weight: 8

- platform: template
  name: "MQTT Client ID"
  id: mqtt_client_id_stored
  state_topic:
  internal: false
  web_server:
    sorting_group_id: printago
    sorting_weight: 10
  icon: "mdi:identifier"
  lambda: |-
    std::string username = id(username_text).state;

    // Clean username
    username.erase(std::remove_if(username.begin(), username.end(), ::isspace), username.end());

    if (!username.empty()) {
      // Generate MQTT client_id from username and last 6 digits of MAC address
      std::string mac = get_mac_address();
      mac.erase(std::remove(mac.begin(), mac.end(), ':'), mac.end());
      
      // Get last 6 digits of MAC address
      std::string mac_suffix = mac.length() >= 6 ? mac.substr(mac.length() - 6) : mac;
      
      std::string client_id = "apiclient_" + username + "_" + mac_suffix;
      
      // Set MQTT credentials
      id(mqtt_client_id).set_username(username.c_str());
      id(mqtt_client_id).set_client_id(client_id.c_str());
      
      ESP_LOGI("mqtt", "Generated client_id: %s", client_id.c_str());
      ESP_LOGI("mqtt", "MQTT Credentials Set - Username: %s, Client ID: %s", username.c_str(), client_id.c_str());
      ESP_LOGI("mqtt", "Current MQTT Config - Broker: %s, Port: %s", 
               id(mqtt_endpoint_text).state.c_str(), 
               id(mqtt_port_text).state.c_str());
      return client_id;
    } else {
      ESP_LOGW("mqtt", "Username is empty, cannot generate client_id");
      return std::string(""); // Return empty string if no username
    }
  on_value:
    then:
    - lambda: |-
        ESP_LOGI("mqtt", "Client ID value updated to: %s", x.c_str());

- platform: template
  name: "Available Printers"
  id: available_printers_display
  icon: "mdi:printer-search"
  internal: true
  lambda: |-
    // Enhanced display with count and current selection indicator
    std::string printer_list = "";
    auto& names = id(printago_printer_names);
    auto& ids = id(printago_printer_ids);
    std::string current_id = id(printer_id).state;

    if (names.empty()) {
      return std::string("No printers found");
    }

    // Add count prefix and current selection
    std::string current_name = "";
    for (size_t i = 0; i < names.size() && i < ids.size(); i++) {
      if (ids[i] == current_id) {
        current_name = names[i];
        break;
      }
    }

    printer_list = std::to_string(names.size()) + " printer" + (names.size() == 1 ? "" : "s");
    if (!current_name.empty()) {
      printer_list += " (Selected: " + current_name + ")";
    }

    return printer_list;

text:
- platform: template
  name: "Api Key" #This name is the key for the rest api, do not change
  id: api_key_text
  mode: password
  restore_value: true
  optimistic: true
  state_topic:
  web_server:
    sorting_group_id: printago
    sorting_weight: 5
  icon: "mdi:key"
  on_value:
    then:
    - lambda: |-
        ESP_LOGI("mqtt", "API Key changed, updating MQTT client ID");
        // Trigger client ID generation
        id(mqtt_client_id).set_password(x.c_str());
        // Refresh printer list when API key changes
        if (!x.empty() && !id(username_text).state.empty()) {
          id(fetch_printago_printers).execute();
        }

- platform: template
  name: "Username" #This name is the key for the rest api, do not change
  id: username_text
  mode: text
  restore_value: true
  optimistic: true
  state_topic:
  web_server:
    sorting_group_id: printago
    sorting_weight: 4
  icon: "mdi:account-circle"
  on_value:
    then:
    - lambda: |-
        ESP_LOGI("mqtt", "Username changed to: %s", x.c_str());
        // Trigger client ID generation
        id(mqtt_client_id_stored).update();
        // Refresh printer list when username changes
        if (!x.empty() && !id(api_key_text).state.empty()) {
          id(fetch_printago_printers).execute();
        }

- platform: template
  id: printer_id_previous
  mode: text
  restore_value: false
  optimistic: true
  state_topic:
  internal: true

- platform: template
  name: "Printer ID" #This name is the key for the rest api, do not change
  id: printer_id
  mode: text
  restore_value: true
  optimistic: true
  state_topic:
  internal: true
  web_server:
    sorting_group_id: printago
    sorting_weight: 1
  on_value:
    then:
    - lambda: |-
        std::string previous_printer_id = id(printer_id_previous).state;
        std::string new_printer_id = x;

        ESP_LOGI("mqtt", "Printer ID changing from '%s' to '%s'", previous_printer_id.c_str(), new_printer_id.c_str());

        // Check if we should connect/reconnect to MQTT
        if (new_printer_id.empty() || id(username_text).state.empty() || id(mqtt_endpoint_text).state.empty() || id(mqtt_port_text).state.empty()) {
          ESP_LOGI("mqtt", "Username, printer ID, mqtt_endpoint or mqtt_port missing, disabling MQTT");
          id(clear_printago_status).execute();
          id(mqtt_client_id).disable();
          return;
        }

        ESP_LOGI("mqtt", "All required fields set, enabling MQTT");
        id(clear_printago_status).execute();
        id(check_printago_status).execute();
        id(mqtt_client_id).enable();

        // Unsubscribe from previous topics
        if (!previous_printer_id.empty() && !id(username_text).state.empty()) {
          std::string old_topic = "stores/" + id(username_text).state + "/printer-stats/" + previous_printer_id;
          std::string alt_old_topic = "stores/" + id(username_text).state + "/entities/printers/" + previous_printer_id;
          ESP_LOGI("mqtt", "Unsubscribing from previous topics");
          id(mqtt_client_id).unsubscribe(old_topic);
          id(mqtt_client_id).unsubscribe(alt_old_topic);
        }

        // Store the new value
        id(printer_id_previous).publish_state(new_printer_id);

        // Subscribe to printer stats topic
        std::string stats_topic = "stores/" + id(username_text).state + "/printer-stats/" + new_printer_id;
        ESP_LOGI("mqtt", "Subscribing to topic: %s", stats_topic.c_str());

        id(mqtt_client_id).subscribe_json(stats_topic, [](const std::string &topic, JsonObject root) {
          ESP_LOGV("mqtt", "Received JSON on stats topic");
          
          // Handle basic status - simple approach
          id(printer_is_online_sensor).publish_state(!root["isOnline"].isNull() ? (bool)root["isOnline"] : false);
          id(printer_is_available_sensor).publish_state(!root["isAvailable"].isNull() ? (bool)root["isAvailable"] : false);
          
          // Handle printer name
          if (!root["metadata"].isNull()) {
            JsonObject metadata = root["metadata"];
            if (!metadata["name"].isNull()) {
              const char* name = metadata["name"];
              if (name != nullptr) {
                id(printer_name).publish_state(name);
              }
            }
          }

          // Handle health status
          bool error_state = false;
          bool warning_state = false;
          if (!root["data"].isNull()) {
            JsonObject data = root["data"];
            if (!data["health"].isNull()) {
              JsonObject health = data["health"];
              if (!health["errors"].isNull() && health["errors"].is<JsonArray>() && health["errors"].size() > 0) {
                error_state = true;
              }
              if (!health["warnings"].isNull() && health["warnings"].is<JsonArray>() && health["warnings"].size() > 0) {
                warning_state = true;
              }
            }
          }
          id(printer_has_error_sensor).publish_state(error_state);
          id(printer_has_warning_sensor).publish_state(warning_state);

          // Handle downloading state
          bool download_state = false;
          if (!root["state"].isNull()) {
            const char* state = root["state"];
            if (state != nullptr && strcmp(state, "PREPARE") == 0) {
              download_state = true;
            }
          }
          id(is_downloading).publish_state(download_state);
        });

        // Subscribe to entities topic for confirmedReady
        std::string entities_topic = "stores/" + id(username_text).state + "/entities/printers";
        ESP_LOGI("mqtt", "Subscribing to entities topic: %s", entities_topic.c_str());

        id(mqtt_client_id).subscribe_json(entities_topic, [new_printer_id](const std::string &topic, JsonObject root) {
          bool ready_state = false;
          if (!root["entities"].isNull()) {
            JsonObject entities = root["entities"];
            if (!entities[new_printer_id.c_str()].isNull()) {
              JsonObject printer_obj = entities[new_printer_id.c_str()];
              if (!printer_obj["confirmedReady"].isNull()) {
                ready_state = (bool)printer_obj["confirmedReady"];
              }
            }
          }
          id(printer_confirmed_ready_sensor).publish_state(ready_state);
        });
select:
- platform: template
  name: "Select Printer"
  id: printer_select
  icon: "mdi:printer-search"
  web_server:
    sorting_group_id: printago
    sorting_weight: 7
  # Use dynamic options with real printer names
  options_lambda: |-
    auto& names = id(printago_printer_names);
    std::vector<std::string> options;

    if (names.empty()) {
      options.push_back("No printers available");
    } else {
      // Add real printer names as options
      for (const auto& name : names) {
        options.push_back(name);
      }
    }

    return options;
  lambda: |-
    // Return the actual printer name based on current state
    auto& names = id(printago_printer_names);
    auto& ids = id(printago_printer_ids);
    std::string current_id = id(printer_id).state;

    // If no printers are available
    if (names.empty()) {
      return std::string("No printers available");
    }

    // Find the current printer ID and return its name
    for (size_t i = 0; i < names.size() && i < ids.size(); i++) {
      if (ids[i] == current_id) {
        return names[i]; // Return the actual printer name
      }
    }

    // If we have printers but current_id doesn't match any, return first printer name
    if (!names.empty()) {
      return names[0];
    }

    // Fallback
    return std::string("No printers available");
  set_action:
    then:
    - lambda: |-
        ESP_LOGI("printago", "Printer selected from dropdown: %s", x.c_str());

        auto& names = id(printago_printer_names);
        auto& ids = id(printago_printer_ids);

        // Handle special cases
        if (x == "No printers available") {
          ESP_LOGW("printago", "No printers available to select");
          return;
        }

        // Find the selected printer name in our vector and get its ID
        for (size_t i = 0; i < names.size() && i < ids.size(); i++) {
          if (names[i] == x) {
            std::string selected_id = ids[i];
            std::string selected_name = names[i];
            ESP_LOGI("printago", "Selected printer: %s (ID: %s)", selected_name.c_str(), selected_id.c_str());
            id(printer_id).publish_state(selected_id);
            // Trigger UI updates
            id(available_printers_display).update();
            return;
          }
        }

        ESP_LOGW("printago", "Unhandled selection: %s", x.c_str());
number:
- platform: template
  name: "Select Printer by Index"
  id: printer_select_number
  icon: "mdi:printer-search"
  internal: true
  min_value: 1
  max_value: 10
  step: 1
  mode: box
  lambda: |-
    // Return current selection index (1-based)
    auto& ids = id(printago_printer_ids);
    if (ids.empty()) {
      return 0.0;
    }

    // Find current printer_id in the vector and return its 1-based index
    std::string current_id = id(printer_id).state;
    for (size_t i = 0; i < ids.size(); i++) {
      if (ids[i] == current_id) {
        return (float)(i + 1);
      }
    }

    return 1.0; // Default to first printer if not found
  set_action:
    then:
    - lambda: |-
        auto& ids = id(printago_printer_ids);
        int index = (int)x - 1; // Convert to 0-based index

        if (index >= 0 && index < ids.size()) {
          std::string selected_id = ids[index];
          ESP_LOGI("printago", "Printer selected by index %d: %s", index + 1, selected_id.c_str());
          // Update the printer_id text field with the selected value
          id(printer_id).publish_state(selected_id);
        } else {
          ESP_LOGW("printago", "Invalid printer index: %d", index + 1);
        }

button:
- platform: template
  name: "Check Printago Status"
  id: check_printago_status_button
  icon: "mdi:cloud-refresh"
  on_press:
  - script.execute: check_printago_status
  web_server:
    sorting_group_id: printago
    sorting_weight: 11

- platform: template
  name: "Fetch Printers (Refresh page)"
  id: fetch_printago_printers_button
  icon: "mdi:printer-search"
  on_press:
  - script.execute: fetch_printago_printers
  web_server:
    sorting_group_id: printago
    sorting_weight: 6

globals:
- id: printago_printer_ids
  type: std::vector<std::string>
  restore_value: false

- id: printago_printer_names
  type: std::vector<std::string>
  restore_value: false
