light:
- platform: esp32_rmt_led_strip
  name: "PrintFarmButton RGB"
  id: printfarmbutton_rgb
  chipset: WS2812
  pin: ${led_gpio}
  num_leds: 13
  rgb_order: GRB
  # rmt_channel: 0
  # rmt_symbols: 96
  state_topic:
  internal: false #set to true to hide
  restore_mode: ALWAYS_OFF
  effects:
  - addressable_rainbow:
      name: Rainbow
      speed: 25
      width: 15
  - pulse:
      name: Pulse
      transition_length: 0.3s
      max_brightness: 90%
      min_brightness: 50%
      update_interval: 0.3s
  # - addressable_scan:
  #     name: Scan
  - addressable_lambda:
      name: Left2Right
      update_interval: 0.03s # Faster refresh for smoother animation
      lambda: |-
        int num_leds = it.size();
        const int scan_time_ms = 1100; // Keep overall scan speed
        const int update_interval_ms = scan_time_ms / num_leds;
        const int num_dots = 2; // Number of moving dot pairs
        static uint32_t last_update = 0;
        static int pos = 0;
        uint32_t now = millis();
        if (now - last_update > update_interval_ms) {
          pos++;
          if (pos >= num_leds) pos = 0;
          last_update = now;
        }
        for (int i = 0; i < num_leds; i++) {
          it[i] = Color(0, 230, 0); // Green background
        }
        // Place 2 pairs of moving dots: white then yellow
        for (int d = 0; d < num_dots; d++) {
          int dot_pos = (pos + (d * num_leds) / num_dots) % num_leds;
          it[dot_pos] = Color(230, 230, 230); // First dot: white
          int dot_pos2 = (dot_pos + 1) % num_leds;
          it[dot_pos2] = Color(230, 230, 0); // Second dot: yellow
        }
  - addressable_lambda:
      name: Bambu Idle
      update_interval: 0.03s
      lambda: |-
        static float phase = 0.0;
        phase += 0.01;
        if (phase > 1.0) phase -= 1.0;
        // Hold at max brightness for 50%, slower fade out (30%), fade in (20%)
        float breath;
        if (phase < 0.50f) {
          breath = 1.0f; // Stay bright for 50% of the cycle
        } else if (phase < 0.80f) {
          // Slower ramp down (bright to dim)
          breath = 1.0f - ((phase - 0.50f) / 0.30f) * 0.7f; // 1.0 to 0.3
        } else {
          // Ramp up (dim to bright)
          breath = 0.3f + ((phase - 0.80f) / 0.20f) * 0.7f; // 0.3 to 1.0
        }
        breath = fmaxf(0.3f, fminf(breath, 1.0f));
        uint8_t brightness = 32 + uint8_t(breath * 198); // 32-230 (90% of 255 is ~230)
        for (int i = 0; i < it.size(); i++) {
          it[i] = Color(brightness, brightness, brightness);
        }
  - addressable_lambda:
      name: Bambu Preparing
      update_interval: 0.03s
      lambda: |-
        int num_leds = it.size();
        static float phase = 0.0;
        phase += 0.03 * (1.0 / 0.03) / (33.0 * 1.2); // Slow down by 20%
        if (phase > 1.0) phase -= 1.0;
        for (int i = 0; i < num_leds; i++) {
          float t = (float(i) / num_leds + phase);
          t = fmodf(t, 1.0f);
          float r, g, b;
          if (t < 0.5f) {
            // Orange to Yellow
            float f = t / 0.5f;
            r = 1.0f;
            g = 0.31f + f * (1.0f - 0.31f); // 80/255 to 255/255
            b = 0.0f;
          } else {
            // Yellow to Orange
            float f = (t - 0.5f) / 0.5f;
            r = 1.0f;
            g = 1.0f - f * (1.0f - 0.31f); // 255/255 to 80/255
            b = 0.0f;
          }
          it[i] = Color(uint8_t(r * 230), uint8_t(g * 230), uint8_t(b * 230));
        }
  - addressable_lambda:
      name: Bambu Error
      update_interval: 0.12s
      lambda: |-
        // Blink twice, then pause (slightly faster, dim red when off)
        static int step = 0;
        step = (step + 1) % 10; // 0-9, 10 steps = 1.2s (0.12s interval)
        bool on = (step == 0 || step == 3); // On at step 0 and 3 (two blinks, spaced out)
        for (int i = 0; i < it.size(); i++) {
          it[i] = on ? Color(230, 0, 0) : Color(80, 0, 0); // Dim red when off (brighter)
        }
